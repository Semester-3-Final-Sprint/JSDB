<div class="ui-wrapper">
  <div class="title">
    <h1>Online Website Library Search</h1>
  </div>
  <div class="db-declare">
    <% if (activeDB === 'postgres') { %>
    <h2>Powered by postgres DB</h2>
    <% } else { %>
    <h2>Powered by mongoDB</h2>
    <% } %>
  </div>
  <div class="input-wrapper">
    <div>
      <input
        class="input-box"
        type="text"
        id="searchInput"
        name="search-criteria"
        placeholder="Please enter search criteria..."
      />
    </div>
    <div class="search-option-wrapper">
      <div>
        <button class="search-buttons" onclick="titleSearch()">
          Search by title
        </button>
      </div>
      <div>
        <button class="search-buttons" onclick="descriptionSearch()">
          Search by Description
        </button>
      </div>
    </div>
  </div>
  <div class="search-options">
    <div>
      <select
        class="search-btn"
        name="author"
        id="author"
        onchange="authorSearch()"
      >
        <option value="">Choose Author</option>
      </select>
    </div>
    <div>
      <select class="search-btn" name="genre" id="genre" onchange="search()">
        <option value="">Choose Genre</option>
      </select>
    </div>
    <div>
      <button
        class="search-btn"
        name="db-switch"
        id="db-switch"
        onclick="urlGo('/db-switch')"
      >
        Switch DB
      </button>
    </div>
  </div>
</div>

<script>
  //code to load genres into select.
  const genreSelect = document.getElementById("genre");

  function loadGenres(genres) {
    for (let genre of genres) {
      const option = document.createElement("option");
      option.textContent = genre.genre_name;
      option.value = genre.genre_id;
      genreSelect.appendChild(option);
    }
  }

  async function fetchAndLoadGenres() {
    try {
      const response = await fetch("/genres/api");
      const data = await response.json();
      const genres = data.genres;
      //   console.log("Genres:", genres); // Check the response here
      loadGenres(genres);
    } catch (error) {
      console.log("Error fetching genres: " + error);
    }
  }

  fetchAndLoadGenres();

  // load authors into select
  const authorSelect = document.getElementById("author");

  function loadAuthors(authors) {
    for (let author of authors) {
      const option = document.createElement("option");
      option.textContent = author.author_name;
      option.value = author.author_id;
      authorSelect.appendChild(option);
    }
  }

  async function fetchAndLoadAuthors() {
    try {
      const response = await fetch("/authors/api");
      const data = await response.json();
      const authors = data.authors;
      //   console.log("Authors:", authors); //check response here
      loadAuthors(authors);
    } catch (error) {
      console.log("Error fetching authors: " + error);
    }
  }

  fetchAndLoadAuthors();

  // it will go.
  const urlGo = (url) => {
    window.location.href = url;
  };

  // gets value of selected genre, build url, then go there.
  const search = async () => {
    const selectedGenre = document.getElementById("genre").value;
    if (selectedGenre) {
      console.log("Before logEvents");
      urlGo(`/books/${selectedGenre}`);
      await logEvents("SELECT", "info", `Genre selected: ${selectedGenre}`);
      console.log("After logEvents");
    }
  };

  // gets value of selected author, build url, then go there.
  const authorSearch = async () => {
    const selectedAuthor = authorSelect.value;
    if (selectedAuthor) {
      console.log("Before logEvents");
      urlGo(`/books/author/${selectedAuthor}`);
      await logEvents("SELECT", "info", `Author selected: ${selectedAuthor}`);
      console.log("After logEvents");
    }
  };

  const titleSearch = () => {
    const searchInput = document.getElementById("searchInput").value;
    if (searchInput) {
      urlGo(`/books/searchTitle/${searchInput}`);
    }
  };

  const descriptionSearch = () => {
    const searchInput = document.getElementById("searchInput").value;
    if (searchInput) {
      urlGo(`/books/searchDescription/${searchInput}`);
    }
  };

  // Function to handle logging events
  const logEvents = (req, event, level, message) => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, "0");
    const day = String(now.getDate()).padStart(2, "0");
    const hours = String(now.getHours()).padStart(2, "0");
    const minutes = String(now.getMinutes()).padStart(2, "0");
    const seconds = String(now.getSeconds()).padStart(2, "0");
    const dateTime = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;

    let loggedInUser = "Guest";
    if (req.app && req.app.locals && req.app.locals.loggedInUser) {
      loggedInUser = req.app.locals.loggedInUser.username;
    }

    const uniqueIdentifier = Math.random().toString(36).substr(2, 9);

    const logEvent = `${dateTime}\t${event}\t${loggedInUser}\t${message}\t${uniqueIdentifier}`;

    console.log(logEvent);

    try {
      const currFolder = "logs/" + year;

      if (!fs.existsSync(currFolder)) {
        console.log(`Creating folder: ${currFolder}`);
        fs.mkdirSync(currFolder, { recursive: true });
      }

      const fileName = `${year}-${month}-${day}_http_events.log`;

      fs.appendFileSync(path.join(currFolder, fileName), logEvent + "\n");
    } catch (err) {
      console.log(err);
    }
  };
</script>
